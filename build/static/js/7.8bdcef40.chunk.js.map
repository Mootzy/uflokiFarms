{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","components/Card/index.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","getBalanceNumber","Card","padding","border","borderRadius","RainbowCard","theme","colors","invertedContrast","tertiary","props","card","background","isFinished","isActive","StyledFarmStakingCard","CardImage","img","Label","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","className","RainbowCardBacklight","size","mb","src","alt","width","height","id","disabled","length","onClick","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","usePriceBnbBusd","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","slice","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","variant","justifyContent","exact","activeClassName","to","mt","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance"],"mappings":"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","file":"static/js/7.8bdcef40.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n}\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {/* <CardBusdValue value={earningsBusd} /> */}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {/* <CardBusdValue value={busdBalance} /> */}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import styled from 'styled-components'\n\nconst Card = styled.div<any>`\n  width: 100%;\n  border-radius: 16px;\n  padding: 1.25rem;\n  padding: ${({ padding }) => padding};\n  border: ${({ border }) => border};\n  border-radius: ${({ borderRadius }) => borderRadius};\n`\nexport default Card\n\nexport const LightCard = styled(Card)`\n  border: 1px solid ${({ theme }) => theme.colors.invertedContrast};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n`\n\nexport const GreyCard = styled(Card)`\n  background-color: ${({ theme }) => theme.colors.tertiary};\n`\n\nexport const RainbowCard = styled.div<{ isActive?: boolean; isFinished?: boolean }>`\n  background: ${(props) => props.theme.card.background};\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  border-radius: 32px;\n  display: flex;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: ${({ isActive }) =>\n    isActive\n      ? '0px 0px 0px 1px #0098A1, 0px 0px 4px 8px rgba(31, 199, 212, 0.4);'\n      : '0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05)'};\n  flex-direction: column;\n  position: relative;\n  \n`","import React, { useState, useCallback } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { Heading, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport RainbowCardBacklight from '../../../components/RainbowCardBacklight/RainbowCardBacklight'\nimport { RainbowCard } from '../../../components/Card'\n\nconst StyledFarmStakingCard = styled(RainbowCard)`\n  position: relative;\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard className=\"test\">\n      <RainbowCardBacklight />\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'Litter to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'Litter in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting Litter')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport RainbowCardBacklight from '../../../components/RainbowCardBacklight/RainbowCardBacklight'\nimport { RainbowCard } from '../../../components/Card'\n\nconst StyledCakeStats = styled(RainbowCard)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <RainbowCardBacklight />\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Litter Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Litter Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Litter Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New Litter/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport RainbowCardBacklight from '../../../components/RainbowCardBacklight/RainbowCardBacklight'\nimport { RainbowCard } from '../../../components/Card'\n\nconst StyledTotalValueLockedCard = styled(RainbowCard)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  const data = useGetStats()\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <RainbowCardBacklight />\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all internal and external LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <>\n            <Skeleton height={66} />\n          </>\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id: string\n  chain: string\n  name: string\n  site_url: string\n  logo_url: string\n  has_supported_portfolio: boolean\n  tvl: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\n        const responseData: DeBankTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}","import React, { useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Heading, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { QuoteToken } from 'config/constants/types'\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport RainbowCardBacklight from '../../../components/RainbowCardBacklight/RainbowCardBacklight'\nimport { RainbowCard } from '../../../components/Card'\n\nconst StyledFarmStakingCard = styled(RainbowCard)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n\n  const maxAPY = useRef(Number.MIN_VALUE)\n\n  const getHighestAPY = () => {\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n\n    calculateAPY(activeFarms)\n\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\n  }\n\n  const calculateAPY = useCallback(\n    (farmsToDisplay) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n\n      farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\n\n        return apy\n      })\n    },\n    [bnbPrice, farmsLP],\n  )\n\n  return (\n    <StyledFarmStakingCard>\n      <RainbowCardBacklight />\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {getHighestAPY() ? (\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  // background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n  background-repeat: no-repeat;\n  background-position: left top, right top;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 136px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"white\">\n          {TranslateString(576, 'Universal Floki Exchange')}\n        </Heading>\n        <Text>{TranslateString(578, 'Welcome to the future.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <EarnAPYCard />\n          {/* <EarnAssetCard /> */}\n          {/* <LotteryCard /> */}\n        </Cards>\n        <CTACards>\n          {/* <EarnAPYCard /> */}\n          {/* <WinCard /> */}\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}